> Container : virtual operating environment, with everything that 
yours software needs to run, includes libraries, system tools, code
and runtime

Docker cotainer : includes everything which micro service need 
to run

> container runs on docker host , which i the run time environment

Kubernetes
> open-source system for automating deployment , scaling ,
 and management of 
containerized application 
> deploys, manages, and maintains containers 
> It can restart ot replace failed container
> Deployment and updates : it can 100 0r 1000 of container 
  with a single command 

EKS : elatic kubernets service 
> it runs kubernetes on AWS without needing to install and operate 
your own kubernetes 

pod : group of one or more container ,with shared storage and network resources, and
      specifications for how to run the container

EKS is intergrated with other cloud services : 
 CloudTrail : logging of all user and API activity
 CloudWatch : Monitorinf an dclontrol plane logs
 IAM : authentication, auth, and permissions

 AWS installs and operates and maintains the kubernetes control plane 

 > EKS is fully compactible with the kubernetes tools and plugins  

 Creating a EKS cluster 
 1 . IAM user(creating a admin level user)
 2 . EC2 instance (run all the commands to create our cluster)
 3 . eksctl  (eksctl is a simple CLI tool for creating and managing clusters 


    > create a eks cluster and configure  the control plane
     on EKS - Amazon's managed Kubernetes service for EC2)
    > three worker nodes 
    > create a deployment > consisting pods and runnings in the pod, 
    using ngix image for the container
    >load balancer server to access the application form the outside world, expose
    the app on ineter 
4 . kubectl



> warr snyk
> unit test err
> coverage warr
> preti


https://865068824416.signin.aws.amazon.com/console

Monica_1

1'hkId1*

Lab : EKS

aws configure
IAM credentials :
access key : AKIA3KH6IPR66MDAVC4I
pw : Z+UlalcpuBuEPRZuIq5Hs8LboArbukr7RJXGP5uG
region : us-east-1
format : json

> Install kubectl

curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
chmod +x ./kubectl
- mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
kubectl version --short --client

> Install eksctl

curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/bin
eksctl version


> Create Cluster 

>can check in clouformation 
>EC2 -> all create nodes with the admin wrk station
eksctl create cluster --name dev --region us-east-1 --nodegroup-name standard-workers --node-type t3.medium --nodes 3 --nodes-min 1 --nodes-max 4 --managed

>connect to main
eksctl get cluster -> to connect to amazon eks 
aws eks update-kubeconfig --name dev-cluster --region us-east-1 -> to update

> Install git 

sudo yum install -y git
git clone https://github.com/ACloudGuru-Resources/Course_EKS-Basics
Ls
Go to that repo folder
Ls
Cat yaml file

Kubectl apply -f ./node-svc.yaml
Kubectl get service

kubectl apply -f ./node-deployement.yaml
kubectl get deployment
Kubectl get pods
kubectl get rs
kubectl get node

Curl “(loadbalancer address)”
You can check on browser by passing the load balancer address

AKIA3QXMW52ISSXUUDMK
QDkBamiA8tp7fLeLIst/hIPNb5UkTRw/CM7CkeBQ





















